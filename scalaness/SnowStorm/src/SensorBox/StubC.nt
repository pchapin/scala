// FILE   : StubC.nt
// SUMMARY: The module that is specialized for each stub.
//

#include "KappaMsg.h"

module StubC {
    provides command void change_neighbor( struct commandTAG *new_value );

    // Sets the key in the encryption hardware. Only proceed when set_key_done( ) is called.
    uses command int set_key( const uint8_t aes_key[] );
    provides command void set_key_done( );

    // Encrypts a block of data (16 bytes). Only proceed when get_cipher( ) is called.
    uses command int put_plain( const uint8_t plain_text[] );
    provides command void get_cipher( const uint8_t cipher_text[] );

    uses command void send( const uint8_t buffer[] );
}
implementation {
    uint8_t plain_buffer[16];
    uint8_t send_buffer[10];
    int in_progress = 0;

    command void change_neighbor( struct commandTAG *new_value )
    {
        int i;
     
        // Ignore this request if we are already in the middle of something.
        if( in_progress ) return;

        // Copy the new value into the plain_buffer.
        for( i = 0; i < 15; ++i ) {
            plain_buffer[i] = 0;
        }
        plain_buffer[0] = new_value->mote_id;
        plain_buffer[1] = new_value->command_name;
        plain_buffer[2] = (uint8_t)( (new_value->val & 0xFF00U) >> 8 );
        plain_buffer[3] = (uint8_t)( (new_value->val & 0x00FFU) >> 0 );
        plain_buffer[4] = new_value->nonce;

        // If the key was set successfully we are off and running.        
        if( call set_key( key ) ) in_progress = 1;
        return;
    }

    command void set_key_done( )
    {
        // If the plain text can't be installed, give up.
        if( !call put_plain( plain_buffer ) ) in_progress = 0;
    }


    command void get_cipher( const uint8_t cipher_text[] )
    {
        int i;

        for( i = 0; i < 6; ++i ) {
            send_buffer[i] = plain_buffer[i];
        }
        for( i = 0; i < 4; ++i ) {
             send_buffer[6 + i] = cipher_text[i];
        }
        call send( send_buffer );
        in_progress = 0;   // We should only do this once the send is complete.
    }

}
