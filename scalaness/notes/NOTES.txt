
NOTES.txt
=========

+ In scala/tools/nsc/Global.scala, in the method compileUnitsInternal (around line 1506). Here
  the compiler appears to execute the phases in order. I think you can execute code between the
  phases by putting it right after the invocation of globalPhase.run.

+ In scala/tools/nsc/plugins/Plugins.scala, around line 120, is a place where plugins are
  loaded. I hacked in an explicit call to addToPhasesSet to load the plugin for the Scalaness
  post-parser. This is really hacky and I'm not sure if this is a good way to go about it, but
  basically the post-parser is treated like a plugin phase that happens to have its code built
  into the compiler.


Using Eclipse
-------------

For Scala compiler development we recommend Eclipse. We've used Juno (Eclipse v4.2.2) with the
Scala IDE for Scala 2.10 (v3.0.1). 

At the time of this writing Scala is built with Java 1.6. Thus you should install the latest
Java 6 JDK available and be sure to add it as an installed JRE in Eclipse. It does not need to
be the default.

Follow the instructions in src/eclipse for setting up the environment. You will also have to add
a setting for SCALA_BASEDIR to Perferences->Java->Classpath Variables (this is not mentioned in
the src/eclipse/README.md file). If you are on a Windows system you will probably also want to
change the default character encoding to UTF-8 and the default line ending convention to Unix
style line endings.

Build the compiler with ant first to generate some necessary scripts. Then import all the
projects in src/eclipse. We recommend you do a full clean and rebuild in Eclipse. The ant build
will create a "pack" compiler. The Eclipse rebuild will generate all the class files with
Eclipse (for consistency) but leave the pack compiler unchanged. Thus pack always represents the
latest *ant* build.

We also recommend that you disable "semantic highlighting" in Eclipse so that it remains
responsive even when editing large files. Some of the files in the compiler code base (for
example in the type checker) are very large.

To run the compiler under Eclipse you will need to create a suitable run configuration. Use the
"Java Application" configuration template (although the compiler is a Scala program you need to
use its own Scala library, etc, rather than the one that comes with Eclipse). On the "Main" tab
of the run configuration dialog use

       Project: scala-compiler
       Main class: scala.tools.nsc.Main

On the "Classpath" tab add "reflect" and "scala-library" and "antlr-3.4.jar" (in
scala-library/lib/extra) to the "Bootstrap Entries" classpath. On the "Arguments" tab select the
working directory of one of the samples and use the "-nowarn Main.scala" (or some other suitable
main file) for the program arguments. For debugging use the "Scala Application (new debugger)
Launcher."

This should allow you to run and debug the compiler from inside Eclipse.


Using IntelliJ
--------------

The SpartanRPC project has project files for the IntelliJ IDEA environment (one of us (pchapin)
prefers IntelliJ over Eclipse for normal programming). In IntelliJ you'll need to create
external libraries for "Scalaness-compiler" and "Scalaness-library" that refer to the jar files
created by the ant build (the pack compiler). Note that this means IntelliJ will not see any
changes made and compiled with Eclipse until you do 'ant quick.clean; ant' to rebuild the pack
compiler. For more information related to using IntelliJ with Scalaness see the README.txt file
in the SpartanRPC folder.
