<project name="Scalaness" default="distribution" basedir=".">
    <description>Ant build control file for Scalaness</description>

  <!-- Set global properties for all builds. -->
  <property environment="env"/>
  <property name="scala.home"         location="${env.SCALA_HOME}"/>
  <property name="library.dir"        location="lib"/>

  <!-- Set properties for the plugin build. -->
  <property name="main.sources.dir" location="src"/>
  <property name="test.sources.dir" location="test"/>
  <property name="classes.dir"      location="classes"/>
  <property name="main.classes.dir" location="${classes.dir}/main"/>
  <property name="test.classes.dir" location="${classes.dir}/test"/>
  <!-- Put Scalaness.jar in lib so that the ANTLR jar file (located there) can be a plugin. -->
  <property name="distribution.dir" location="lib"/>
  <property name="scaladoc.dir"     location="doc/scaladoc"/>

  <!-- Set properties for the Blink sample build. -->
  <property name="blink.home.dir"         location="Samples/Blink"/>
  <property name="blink.main.sources.dir" location="${blink.home.dir}/src"/>
  <property name="blink.test.sources.dir" location="${blink.home.dir}/test"/>
  <property name="blink.configuration"    location="${blink.home.dir}/Scalaness.cfg"/>
  <property name="blink.classes.dir"      location="${blink.home.dir}/classes"/>
  <property name="blink.main.classes.dir" location="${blink.classes.dir}/main"/>
  <property name="blink.test.classes.dir" location="${blink.classes.dir}/test"/>
  <property name="blink.distribution.dir" location="${blink.home.dir}/bin"/>
  <property name="blink.scaladoc.dir"     location="${blink.home.dir}/doc/scaladoc"/>

  <!-- Set properties for the SpartanRPC sample build. -->
  <property name="spartan.home.dir"         location="Samples/SpartanRPC"/>
  <property name="spartan.main.sources.dir" location="${spartan.home.dir}/src"/>
  <property name="spartan.test.sources.dir" location="${spartan.home.dir}/test"/>
  <property name="spartan.configuration"    location="${spartan.home.dir}/Scalaness.cfg"/>
  <property name="spartan.classes.dir"      location="${spartan.home.dir}/classes"/>
  <property name="spartan.main.classes.dir" location="${spartan.classes.dir}/main"/>
  <property name="spartan.test.classes.dir" location="${spartan.classes.dir}/test"/>
  <property name="spartan.distribution.dir" location="${spartan.home.dir}/bin"/>
  <property name="spartan.scaladoc.dir"     location="${spartan.home.dir}/doc/scaladoc"/>


  <target name="init">
    <!-- Get the Scala related tasks. -->
    <property name="scala-library.jar" location="${scala.home}/lib/scala-library.jar"/>
    <property name="scala-compiler.jar" location="${scala.home}/lib/scala-compiler.jar"/>
    <property name="scala-reflect.jar" location="${scala.home}/lib/scala-reflect.jar"/>
    <property name="scala-actors.jar" location="${scala.home}/lib/scala-actors.jar"/>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala-compiler.jar}"/>
        <pathelement location="${scala-reflect.jar}"/>
        <pathelement location="${scala-library.jar}"/>
      </classpath>
    </taskdef>

    <!-- Classpath used during plugin compilation. -->
    <path id="build.classpath">
      <pathelement location="${scala-compiler.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${library.dir}/antlr-3.4.jar"/>
      <pathelement location="${main.classes.dir}"/>
    </path>

    <!-- Classpath used during scaladoc build. -->
    <path id="scaladoc.classpath">
      <pathelement location="${scala-compiler.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-actors.jar}"/>
      <pathelement location="${library.dir}/antlr-3.4.jar"/>
      <pathelement location="${main.classes.dir}"/>
      <pathelement location="${blink.main.classes.dir}"/>
      <pathelement location="${distribution.dir}/bcprov-jdk16-145.jar"/>
      <pathelement location="${spartan.main.classes.dir}"/>
    </path>

    <!-- Classpath used during plugin tests compilation. -->
    <!-- Is there is a nice way to get this to refer to the compilation classpath above? -->
    <path id="build.test.classpath">
      <pathelement location="${scala-compiler.jar}"/>
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${library.dir}/antlr-3.4.jar"/>
      <pathelement location="${main.classes.dir}"/>

      <pathelement location="${library.dir}/junit-4.8.2.jar"/>
      <pathelement location="${library.dir}/scalatest-2.0.jar"/>
      <pathelement location="${test.classes.dir}"/>
    </path>

    <!-- Classpath used during Blink sample compilation. -->
    <path id="blink.build.classpath">
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${distribution.dir}/Scalaness.jar"/>
      <pathelement location="${blink.main.classes.dir}"/>
    </path>

    <!-- Classpath used during Blink execution. -->
    <path id="blink.run.classpath">
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${distribution.dir}/Scalaness.jar"/>
      <pathelement location="${blink.main.classes.dir}"/>
      <pathelement location="${library.dir}/antlr-3.4.jar"/>
    </path>

    <!-- Classpath used during SpartanRPC sample compilation. -->
    <path id="spartan.build.classpath">
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-actors.jar}"/>
      <pathelement location="${distribution.dir}/Scalaness.jar"/>
      <pathelement location="${distribution.dir}/bcprov-jdk16-145.jar"/>
      <pathelement location="${spartan.main.classes.dir}"/>
    </path>

    <!-- Classpath used during SpartanRPC execution. -->
    <path id="spartan.run.classpath">
      <pathelement location="${scala-reflect.jar}"/>
      <pathelement location="${scala-library.jar}"/>
      <pathelement location="${scala-actors.jar}"/>
      <pathelement location="${distribution.dir}/Scalaness.jar"/>
      <pathelement location="${spartan.main.classes.dir}"/>
      <pathelement location="${library.dir}/antlr-3.4.jar"/>
    </path>

    <!-- Create the time stamp -->
    <tstamp/>
  </target>


  <!-- ================ -->
  <!-- SCALANESS PLUGIN -->
  <!-- ================ -->

  <!-- There is an ANTLR task. Should I be using it? This seems to do the job. -->
  <target name="antlr" description="Compile the Minimal nesC grammar">
    <java classname="org.antlr.Tool" fork="true" dir="${main.sources.dir}/edu/uvm/mininess/parser">
      <arg value="-make"/>
      <arg value="Mininess.g"/>
      <classpath path="${library.dir}/antlr-3.4.jar"/>
    </java>
  </target>


  <target name="compile" depends="init,antlr" description="Compile the Scalaness plugin" >
    <mkdir dir="${main.classes.dir}"/>

    <!-- Compile the Scala code from ${main.sources.dir} into ${main.classes.dir} -->
    <!-- NOTE: When I first added -J-Xss2M to increase the stack size for pattern matching
         analysis, it worked (no stack overflow). Later, for no obvious reason, it stopped
         working (stack overflow occured)... yet it works when the ant target is run from
         inside IntelliJ. It's as if the -J-Xss2M option isn't making it to the JVM when ant
         is launched from a console, even though it did work as expected at first. I added
         the -Xno-patmat-analysis option to disable pattern matching analysis for now until
         this issue is resolved. -->
    <scalac deprecation="on"
            addparams="-feature -g:vars -J-Xss2M -Xno-patmat-analysis"
            srcdir="${main.sources.dir}"
            destdir="${main.classes.dir}"
            classpathref="build.classpath">
      <include name="**/*.scala"/>
      <include name="**/*.java"/>  <!-- Is this really necessary? I think so. -->
    </scalac>

    <!-- Compile the Java code from ${main.sources.dir} into ${main.classes.dir} -->
    <javac deprecation="on"
           debug="true"
           srcdir="${main.sources.dir}"
           destdir="${main.classes.dir}"
           classpathref="build.classpath"
           includeAntRuntime="false">
      <include name="**/*.java"/>
    </javac>

    <!-- Don't forget to copy the other supporting files needed by the plugin. -->
    <copy file="${main.sources.dir}/plugin.properties"
          tofile="${main.classes.dir}/plugin.properties"/>
    <copy file="${main.sources.dir}/scalac-plugin.xml"
          tofile="${main.classes.dir}/scalac-plugin.xml"/>
  </target>


  <target name="test.compile" depends="compile" description="Compile the test program" >
    <mkdir dir="${test.classes.dir}"/>

    <!-- Compile the Scala code from ${test.sources.dir} into ${test.classes.dir} -->
    <scalac deprecation="on"
            addparams="-g:vars"
            srcdir="${test.sources.dir}"
            destdir="${test.classes.dir}"
            classpathref="build.test.classpath">
      <include name="**/*.scala"/>
      <include name="**/*.java"/>  <!-- Is this really necessary? I think so. -->
    </scalac>

    <!-- Compile the Java code from ${test.sources.dir} into ${test.classes.dir} -->
    <javac deprecation="on"
           debug="true"
           srcdir="${test.sources.dir}"
           destdir="${test.classes.dir}"
           classpathref="build.test.classpath"
           includeAntRuntime="false">
      <include name="**/*.java"/>
    </javac>
  </target>


  <!-- There is a JUnit task. Should I be using it? This seems to do the job. -->
  <target name="test" depends="test.compile,distribution" description="Test the Scalaness plugin">
    <java classname="org.junit.runner.JUnitCore" fork="true">
      <arg value="edu.uvm.mininess.DeclarationExtractorTest"/>
      <arg value="edu.uvm.mininess.InterfaceLocatorTest"/>
      <arg value="edu.uvm.mininess.ParserTest"/>
      <arg value="edu.uvm.mininess.TreeConverterTest"/>
      <arg value="edu.uvm.mininess.TyperTest"/>
      <arg value="edu.uvm.scalaness.ConfigurationTest"/>
      <arg value="edu.uvm.scalaness.LiftableTypesTest"/>
      <arg value="edu.uvm.scalaness.PluginPropertiesTest"/>
      <arg value="edu.uvm.scalaness.ScalanessPluginTest"/>
      <arg value="edu.uvm.scalaness.runtime.CompositionTest"/>
      <classpath refid="build.test.classpath"/>
    </java>
  </target>


  <target name="distribution" depends="compile" description="Generate the distribution" >
    <jar jarfile="${distribution.dir}/Scalaness.jar"
         basedir="${main.classes.dir}"/>
  </target>


  <!-- I don't want to try extracting documentation from invalid Scala files. -->
  <target name="scaladoc" depends="compile" description="Generate the Scaladoc" >
    <mkdir dir="${scaladoc.dir}"/>
    <scaladoc srcdir="${main.sources.dir};${blink.main.sources.dir};${spartan.main.sources.dir}"
              destdir="${scaladoc.dir}"
              deprecation="yes"
              unchecked="yes"
              doctitle="Scalaness Internal Documentation"
              classpathref="scaladoc.classpath">
      <include name="**/*.scala"/>
    </scaladoc>
  </target>


  <!-- ============ -->
  <!-- BLINK SAMPLE -->
  <!-- ============ -->

  <target name="blink.compile" depends="distribution" description="Compile the Blink sample" >
    <mkdir dir="${blink.main.classes.dir}"/>

    <!-- Compile the Scala code from ${blink.main.sources.dir} into ${blink.main.classes.dir} -->
    <!-- Use parameters -Xprint:parse -Yshow-trees to display ASTs after parsing. -->
    <!-- Use parameter  -Ybrowse:parse to browse the ASTs after parsing. -->
    <scalac deprecation="on"
            srcdir="${blink.main.sources.dir}"
            destdir="${blink.main.classes.dir}"
            classpathref="blink.build.classpath"
            addparams="-nowarn -Xpluginsdir ${distribution.dir} -Xplugin:Scalaness.jar -Xplugin:${distribution.dir}/antlr-3.4.jar -P:Scalaness:configFile:${blink.configuration}">
      <include name="**/*.scala"/>
    </scalac>

    <!-- Don't forget to copy the nesC templates used to the output folder. -->
    <copy todir="${blink.main.classes.dir}">
      <fileset dir="${blink.main.sources.dir}" casesensitive="yes">
        <include name="**/*.nc"/>
      </fileset>
    </copy>
    <copy file="${blink.main.sources.dir}/Makefile"
          tofile="${blink.main.classes.dir}/Makefile"/>
  </target>


  <target name="blink.distribution" depends="blink.compile" description="Generate the Blink sample distribution" >
    <jar jarfile="${blink.distribution.dir}/Blink.jar"
         basedir="${blink.main.classes.dir}"/>
  </target>


  <target name="blink.run" depends="blink.distribution" description="Run the Blink sample">
    <java classname="edu.uvm.blink.Main" fork="true" dir="${blink.home.dir}">
      <arg value="1"/>
      <classpath refid="blink.run.classpath"/>
      <classpath path="${blink.distribution.dir}/Blink.jar"/>
    </java>
  </target>


  <!-- ================= -->
  <!-- SPARTANRPC SAMPLE -->
  <!-- ================= -->

  <target name="spartan.compile" depends="distribution" description="Compile the SpartanRPC sample" >
    <mkdir dir="${spartan.main.classes.dir}"/>

    <!-- Compile the Scala code from ${spartan.main.sources.dir} into ${spartan.main.classes.dir} -->
    <!-- Use parameters -Xprint:parse -Yshow-trees to display ASTs after parsing. -->
    <!-- Use parameter  -Ybrowse:parse to browse the ASTs after parsing. -->
    <scalac deprecation="on"
            srcdir="${spartan.main.sources.dir}"
            destdir="${spartan.main.classes.dir}"
            classpathref="spartan.build.classpath"
            addparams="-nowarn -Xpluginsdir ${distribution.dir} -Xplugin:Scalaness.jar -Xplugin:${distribution.dir}/antlr-3.4.jar -P:Scalaness:configFile:${spartan.configuration}">
      <include name="**/*.scala"/>
    </scalac>

    <!-- Don't forget to copy the nesC templates used to the output folder. -->
    <copy todir="${spartan.main.classes.dir}">
      <fileset dir="${spartan.main.sources.dir}" casesensitive="yes">
        <include name="**/*.nc"/>
      </fileset>
    </copy>
    <copy file="${spartan.main.sources.dir}/Makefile"
          tofile="${spartan.main.classes.dir}/Makefile"/>
  </target>


  <target name="spartan.distribution" depends="spartan.compile" description="Generate the SpartanRPC sample distribution" >
    <jar jarfile="${spartan.distribution.dir}/SpartanRPC.jar"
         basedir="${spartan.main.classes.dir}"/>
  </target>


  <target name="spartan.run" depends="spartan.distribution" description="Run the SpartanRPC sample">
    <java classname="edu.uvm.spartanrpc.Main" fork="true" dir="${spartan.home.dir}">
      <classpath refid="spartan.run.classpath"/>
      <classpath path="${spartan.distribution.dir}/Spartan.jar"/>
      <arg value="A"/>
    </java>
  </target>


  <!-- ======== -->
  <!-- CLEAN UP -->
  <!-- ======== -->

  <target name="clean" description="Clean up">
    <delete dir="${classes.dir}"/>
    <delete dir="${scaladoc.dir}"/>
    <delete file="${distribution.dir}/Scalaness.jar"/>
    <delete file="${main.sources.dir}/edu/uvm/mininess/parser/Mininess.tokens"/>
    <delete file="${main.sources.dir}/edu/uvm/mininess/parser/MininessLexer.java"/>
    <delete file="${main.sources.dir}/edu/uvm/mininess/parser/MininessParser.java"/>
  </target>


  <target name="blink.clean" description="Clean up Blink sample">
    <delete dir="${blink.classes.dir}"/>
    <delete dir="${blink.scaladoc.dir}"/>
    <delete dir="${blink.distribution.dir}/Blink.jar"/>
  </target>


  <target name="spartan.clean" description="Clean up SpartanRPC sample">
    <delete dir="${spartan.classes.dir}"/>
    <delete dir="${spartan.scaladoc.dir}"/>
    <delete dir="${spartan.distribution.dir}/SpartanRPC.jar"/>
  </target>


  <target name="all.clean"
          depends="clean,blink.clean,spartan.clean"
          description="Clean up all project components"/>

</project>
