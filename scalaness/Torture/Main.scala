
import edu.uvm.nest.{Declarations, NesTTypes}
import edu.uvm.scalaness._
import edu.uvm.scalaness.LiftableTypes._

object Main {

  @ModuleType("""{}
                 < addrT <: UInt32; >
                 { ; radio(message: MessageType{src: addrT, dest: addrT, data: Array[UInt8,64]}): ErrorT}""")
  class RadioC extends NesTComponent {
    
    /////////
    // Code generated by the Scalaness compiler.
    /////////
    def instantiate(addrT: MetaType[UInt32]) = {
      sc_addrT = addrT
      this
    }

    val configuration =
      new ProgramComponentWrapper(new NamedProgramComponent(
        name            = "RadioC",              // TODO: Extract from AST.
        enclosingObject = this,
        typeParameters  = Set("addrT"),          // TODO: Obtain from class MetaType parameters.
        valueParameters = Set(),                 // TODO: Obtain from class value parameters.
        imports         = Declarations.extractImports(abstractSyntax),
        exports         = Declarations.extractExports(abstractSyntax),
        abstractSyntax  = abstractSyntax), "generated")
    
    def getTypeMap  = Map("addrT" -> sc_addrT)
    def getValueMap = Map[String, Any]()
    ////////
    // END of Scalaness generated code.
    //////// 

    "RadioC.nt"
  }


  @ModuleType("""{}
                 < addrT <: UInt32; >
                 { radio(message: MessageType{src: addrT, dest: addrT, data: Array[UInt8,64]}): ErrorT;
                   send(s: addrT, d: addrT, data: Array[UInt8]): ErrorT }""")
  class SendC extends NesTComponent {

    /////////
    // Code generated by the Scalaness compiler.
    /////////
    def instantiate(addrT: MetaType[UInt32]) = {
      sc_addrT = addrT
      this
    }

    val configuration =
      new ProgramComponentWrapper(new NamedProgramComponent(
        name            = "SendC",               // TODO: Extract from AST.
        enclosingObject = this,
        typeParameters  = Set("addrT"),          // TODO: Obtain from class MetaType parameters.
        valueParameters = Set(),                 // TODO: Obtain from class value parameters.
        imports         = Declarations.extractImports(abstractSyntax),
        exports         = Declarations.extractExports(abstractSyntax),
        abstractSyntax  = abstractSyntax), "generated")
    
    def getTypeMap  = Map("addrT" -> sc_addrT)
    def getValueMap = Map[String, Any]()
    ////////
    // END of Scalaness generated code.
    //////// 

    "SendC.nt"
  }


  /**
   * The main method does some wacky stuff.
   */
  def main(args: Array[String]) {

    @ModuleType(""" """)
    type MyModuleType = NesTComponent

    val wackyList : List[MyModuleType] = List(new RadioC, new SendC)

    
    @ModuleType(
      """{}
         < addrT <: UInt32; >
         { ;
           radio(message: MessageType{src: addrT, dest: addrT, data: Array[UInt8,64]}): ErrorT}""")
    val item1 = wackyList(0)


    @ModuleType(
      """{}
         < addrT <: UInt32; >
         { radio(message: MessageType{src: addrT, dest: addrT, data: Array[UInt8,64]}): ErrorT;
           send(s: addrT, d: addrT, data: Array[UInt8]): ErrorT }""")
    val item2 = wackyList(1)

    // Still need to instantiate item1 and item2 before they can be wired.

    val overallConfiguration = item2 +> item1
    println("Hello, World");
  }

}
