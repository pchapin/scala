<?xml version="1.0" encoding="UTF-8"?>
<tickets type="array">
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-06-14T11:29:01-04:00</created-on>
  <description>The representation of Mininess types is currently abstract (a collection of case objects and case classes). This is fine for internal use but it is ugly to display. It would be nice to have a method that converts the abstract representation of a Mininess type into something that looks more like the way types are written in Mininess programs. For example we want something like

&lt;pre&gt;
Array(Pointer(UInt8), 10)
&lt;/pre&gt;

to be displayed as

&lt;pre&gt;
uint8_t *[10]
&lt;/pre&gt;

Fully correct handling of this conversion might be tricky due to the somewhat odd syntax of types used by C like languages. It should be relatively easy, however, to get an approximately correct version of the method. I expect this method will be useful in error and debug messages produced by the Scalaness compiler.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">4160344</id>
  <importance type="integer">19</importance>
  <importance-float type="float">19.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">19</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Create method to convert Mininess types to a user friendly format</summary>
  <updated-at type="datetime">2012-02-17T19:32:13-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-07-25T20:42:06-04:00</created-on>
  <description>Right now the first error found during the type checking of Mininess inclusions causes an exception to be thrown and the checking to abort. It would be better if the type checking continued after the first error to see if there are more errors. Implementing this will be a little tricky. In the case of undefined symbols it will be necessary to &quot;guess&quot; what type the symbols should have so they can be reasonably checked when used later.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">4533948</id>
  <importance type="integer">22</importance>
  <importance-float type="float">22.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">22</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Mininess inclusion type checking should continue after first error</summary>
  <updated-at type="datetime">2012-02-17T19:33:06-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-07-25T20:45:20-04:00</created-on>
  <description>Right now if a syntax error is detected during the parsing of a Mininess inclusion, the location of the error is not reported. This makes the usefulness of the error message very limited. This should be corrected.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">4533958</id>
  <importance type="integer">23</importance>
  <importance-float type="float">23.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">23</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Parse errors that arise while parsing Mininess inclusions should have their positions reported</summary>
  <updated-at type="datetime">2012-02-17T19:33:47-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-07-25T20:50:37-04:00</created-on>
  <description>Right now the first syntax error found during the parsing of a Mininess inclusion causes the parse to abort. It is traditional for compilers to attempt a correction and then continue parsing to search for additional errors. The Scalaness compiler should do the same.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">4533984</id>
  <importance type="integer">24</importance>
  <importance-float type="float">24.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">24</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Mininess inclusion syntax checking should continue after first error</summary>
  <updated-at type="datetime">2012-02-17T19:34:40-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-11-28T14:53:21-05:00</created-on>
  <description>Currently return statements are type checked as Some(Okay) provided the expression being returned is Okay. However, the type checker should verify that the type being returned actually agrees with the declared type of the enclosing function/command/event.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">10570813</id>
  <importance type="integer">29</importance>
  <importance-float type="float">29.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">29</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Type checking return statements should verify return type</summary>
  <updated-at type="datetime">2011-11-28T14:53:21-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">5</component-id>
  <created-on type="datetime">2012-02-27T20:45:59-05:00</created-on>
  <description>RIght now any class or module with a primary constructor ending with a string literal is treated as a wrapper around a Mininess inclusion. However, the intention is for all such classes or modules to also extend the trait MininessComponent. This trait contains essential runtime support for manipulating Mininess modules; its presence should be verified. In particularly only classes (or modules) that extend MininessComponent should be searched for Mininess inclusions and, furthermore, it should be a compile time error if no inclusion is found in such a class or module.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">15805483</id>
  <importance type="integer">32</importance>
  <importance-float type="float">32.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">32</number>
  <priority type="integer">3</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>MininessComponent marker trait should be verified</summary>
  <updated-at type="datetime">2012-09-06T13:52:21-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer"></component-id>
  <created-on type="datetime">2011-05-16T13:23:04-04:00</created-on>
  <description>Currently the Mininess templates are stored in the executable jar as raw source files. This requires the runtime system to reparse them during the execution of the Scalaness program. The main issue with that is it requires ANTLR to be available to the runtime system. Since the Mininess templates must be parsed during compilation (for type checking) it might be nice to instead store them as serialized ASTs in the executable jar file. This would avoid reparsing the source at runtime and ANTLR would not needed.

This ticket is a low priority enhancement.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">3907778</id>
  <importance type="integer">3</importance>
  <importance-float type="float">3.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">3</number>
  <priority type="integer">4</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Store Mininess templates in executable jar as serialized ASTs</summary>
  <updated-at type="datetime">2012-02-17T19:30:41-05:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id></assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">0</component-id>
  <created-on type="datetime">2011-08-21T15:49:35-04:00</created-on>
  <description>The specification of Mininess in the Scalaness User Documentation says that the negative sign when applied to an integer literal is part of the literal. That is '-128' is a single token and not the '-' token followed by the '128' token. This is important because otherwise -128 will have type int16_t rather than int8_t as it should. In particular '128' must have type int16_t since 128 is too large to represent with int8_t. With the '-' sign as part of the literal token the compiler can see that '-128' is a legal int8_t value and assign it an appropriate type.

The Scalaness compiler currently does not handle this properly. The ANTLR grammar needs to be changed to deal with negative literals directly.</description>
  <from-support type="integer">0</from-support>
  <id type="integer">5151051</id>
  <importance type="integer">26</importance>
  <importance-float type="float">26.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer"></milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">26</number>
  <priority type="integer">4</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>0</status>
  <status-name>New</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Negative integer literals are not handled properly.</summary>
  <updated-at type="datetime">2012-09-06T13:53:22-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">None</estimate>
  <total-estimate type="float">0.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
<ticket>
  <assigned-to-id>cFwOhwY0er251ZaaeP0Qfc</assigned-to-id>
  <completed-date type="datetime"></completed-date>
  <component-id type="integer">5</component-id>
  <created-on type="datetime">2012-09-06T13:58:02-04:00</created-on>
  <description>The additional type checking rules required by Scalaness will require that extra type information be attached to existing Scala objects. Hopefully there is a place in the compiler where that additional information can be conveniently added. This ticket is resolved when how to handle this issue is understood.</description>
  <from-support type="integer">1</from-support>
  <id type="integer">31472723</id>
  <importance type="integer">1</importance>
  <importance-float type="float">1.0</importance-float>
  <is-story type="boolean">false</is-story>
  <milestone-id type="integer">1807693</milestone-id>
  <notification-list>cFwOhwY0er251ZaaeP0Qfc</notification-list>
  <number type="integer">35</number>
  <priority type="integer">1</priority>
  <reporter-id>cFwOhwY0er251ZaaeP0Qfc</reporter-id>
  <space-id>bb-QskC_Gr4kjJeJe5cbCb</space-id>
  <status type='integer'>1</status>
  <status-name>Accepted</status-name>
  <story-importance type="integer">0</story-importance>
  <summary>Figure out where additional type information can be added to Scala ASTs</summary>
  <updated-at type="datetime">2012-09-09T15:51:51-04:00</updated-at>
  <working-hours type="float">0.0</working-hours>
  <working-hour type="float" warning="deprecated">0.0</working-hour>
  <estimate type="string">Medium</estimate>
  <total-estimate type="float">3.0</total-estimate>
  <invested-hours type="float">0.0</invested-hours>
  <assigned-to><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></assigned-to>
  <reporter><id>cFwOhwY0er251ZaaeP0Qfc</id><login>pchapin</login><login_name warning="deprecated">pchapin</login_name><name>Peter Chapin</name><organization>Vermont Technical College</organization><website>http://web.vtc.edu/users/pcc09070/</website></reporter>
</ticket>
</tickets>
